{"version":3,"sources":["shared/components/UIElements/Card.js","user/pages/Auth.js"],"names":["Card","props","className","style","children","Auth","auth","useContext","AuthContext","useState","isLoginMode","setIsLoginMode","useHttpClient","isLoading","error","sendRequest","clearError","useForm","email","value","isValid","password","formState","inputHandler","setFormData","authSubmitHandler","event","preventDefault","process","JSON","stringify","inputs","responseData","login","userId","token","formData","FormData","append","name","image","user","id","onClear","asOverLay","onSubmit","element","type","label","validators","VALIDATOR_REQUIRE","errorText","onInput","center","VALIDATOR_EMAIL","VALIDATOR_MINLENGTH","disabled","inverse","onClick","undefined","prevMode"],"mappings":"qGAAA,0BAYeA,IARF,SAAAC,GACX,OACE,yBAAKC,UAAS,eAAUD,EAAMC,WAAaC,MAAOF,EAAME,OACrDF,EAAMG,Y,+NCNb,4xMAiKeC,UAhJF,WACX,IAAMC,EAAOC,qBAAWC,KACxB,EAAsCC,oBAAS,GAAK,mBAA7CC,EAAW,KAAEC,EAAc,KAClC,EAAsDC,cAA9CC,EAAS,EAATA,UAAWC,EAAK,EAALA,MAAOC,EAAW,EAAXA,YAAaC,EAAU,EAAVA,WAEvC,EAA+CC,YAC7C,CACEC,MAAO,CACLC,MAAO,GACPC,SAAS,GAEXC,SAAU,CACRF,MAAO,GACPC,SAAS,KAGb,GACD,mBAZME,EAAS,KAAEC,EAAY,KAAEC,EAAW,KA2CrCC,EAAiB,uCAAG,WAAOC,GAAK,2EACb,GAAvBA,EAAMC,kBAEFjB,EAAY,CAAD,yCAEgBK,EACzBa,uDACA,OACAC,KAAKC,UAAU,CACbZ,MAAOI,EAAUS,OAAOb,MAAMC,MAC9BE,SAAUC,EAAUS,OAAOV,SAASF,QAEtC,CACE,eAAgB,qBAElB,KAAD,EAVKa,EAAY,OAWlB1B,EAAK2B,MAAMD,EAAaE,OAAQF,EAAaG,OAAO,gFASC,OALjDC,EAAW,IAAIC,UACZC,OAAO,QAAShB,EAAUS,OAAOb,MAAMC,OAChDiB,EAASE,OAAO,OAAQhB,EAAUS,OAAOQ,KAAKpB,OAC9CiB,EAASE,OAAO,WAAYhB,EAAUS,OAAOV,SAASF,OAEtDiB,EAASE,OAAO,QAAShB,EAAUS,OAAOS,MAAMrB,OAAO,oBAG1BJ,EACzBa,wDACA,OACAQ,GACA,KAAD,GAJKJ,EAAY,OAMlB1B,EAAK2B,MAAMD,EAAaS,KAAKC,IAAI,oHAGtC,gBArCsB,sCAuCvB,OACE,oCACE,kBAAC,IAAU,CAAC5B,MAAOA,EAAO6B,QAAS3B,IACnC,kBAAC,IAAI,CAACd,UAAU,kBACbW,GAAa,kBAAC,IAAc,CAAC+B,WAAS,IACvC,8CACA,6BACA,0BAAMC,SAAUpB,IACZf,GACA,kBAAC,IAAK,CACJoC,QAAQ,QACRJ,GAAG,OACHK,KAAK,OACLC,MAAM,YACNC,WAAY,CAACC,eACbC,UAAU,uBACVC,QAAS7B,KAGXb,GACA,kBAAC,IAAW,CACV2C,QAAM,EACNX,GAAG,QACHU,QAAS7B,EACT4B,UAAU,4BAGd,kBAAC,IAAK,CACJL,QAAQ,QACRJ,GAAG,QACHK,KAAK,QACLC,MAAM,SACNC,WAAY,CAACK,eACbH,UAAU,sCACVC,QAAS7B,IAEX,kBAAC,IAAK,CACJuB,QAAQ,QACRJ,GAAG,WACHK,KAAK,WACLC,MAAM,WACNC,WAAY,CAACM,YAAoB,IACjCJ,UAAU,wDACVC,QAAS7B,IAEX,kBAAC,IAAM,CAACwB,KAAK,SAASS,UAAWlC,EAAUF,SACxCV,EAAc,QAAU,WAG7B,kBAAC,IAAM,CAAC+C,SAAO,EAACC,QArHI,WACnBhD,EAUHc,EAAY,2BAELF,EAAUS,QAAM,IACnBQ,KAAM,CACJpB,MAAO,GACPC,SAAS,GAEXoB,MAAO,CACLrB,MAAO,KACPC,SAAS,MAGb,GArBFI,EAAY,2BAELF,EAAUS,QAAM,IACnBQ,UAAMoB,EACNnB,WAAOmB,IAETrC,EAAUS,OAAOb,MAAME,SAAWE,EAAUS,OAAOV,SAASD,SAkBhET,GAAe,SAACiD,GAAQ,OAAMA,OA2FiB,aAC9BlD,EAAc,SAAW","file":"static/js/7.8591487b.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { useState, useContext } from 'react';\n\nimport Card from '../../shared/components/UIElements/Card';\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport ImageUpload from '../../shared/components/FormElements/ImageUpload';\nimport {\n  VALIDATOR_EMAIL,\n  VALIDATOR_MINLENGTH,\n  VALIDATOR_REQUIRE,\n} from '../../shared/util/validators';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport { AuthContext } from '../../shared/context/auth-context';\nimport './Auth.css';\n\nconst Auth = () => {\n  const auth = useContext(AuthContext);\n  const [isLoginMode, setIsLoginMode] = useState(true);\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n\n  const [formState, inputHandler, setFormData] = useForm(\n    {\n      email: {\n        value: '',\n        isValid: false,\n      },\n      password: {\n        value: '',\n        isValid: false,\n      },\n    },\n    false\n  );\n\n  const switchModeHandler = () => {\n    if (!isLoginMode) {\n      setFormData(\n        {\n          ...formState.inputs,\n          name: undefined,\n          image: undefined,\n        },\n        formState.inputs.email.isValid && formState.inputs.password.isValid\n      );\n    } else {\n      setFormData(\n        {\n          ...formState.inputs,\n          name: {\n            value: '',\n            isValid: false,\n          },\n          image: {\n            value: null,\n            isValid: false,\n          },\n        },\n        false\n      );\n    }\n    setIsLoginMode((prevMode) => !prevMode);\n  };\n\n  const authSubmitHandler = async (event) => {\n    event.preventDefault();\n\n    if (isLoginMode) {\n      try {\n        const responseData = await sendRequest(\n          process.env.REACT_APP_BACKEND_URL + '/users/login',\n          'POST',\n          JSON.stringify({\n            email: formState.inputs.email.value,\n            password: formState.inputs.password.value,\n          }),\n          {\n            'Content-Type': 'application/json',\n          }\n        );\n        auth.login(responseData.userId, responseData.token);\n      } catch (error) {}\n    } else {\n      // new FormData is built-in js method. Image file is binary data. That's why we can't use JSON format data.\n      const formData = new FormData();\n      formData.append('email', formState.inputs.email.value);\n      formData.append('name', formState.inputs.name.value);\n      formData.append('password', formState.inputs.password.value);\n      //backend-iin \"users-routes.js\" dotor fileUpload.single('image') gesen uchraas...\n      formData.append('image', formState.inputs.image.value);\n\n      try {\n        const responseData = await sendRequest(\n          process.env.REACT_APP_BACKEND_URL + '/users/signup',\n          'POST',\n          formData\n        );\n\n        auth.login(responseData.user.id);\n      } catch (error) {}\n    }\n  };\n\n  return (\n    <>\n      <ErrorModal error={error} onClear={clearError} />\n      <Card className='authentication'>\n        {isLoading && <LoadingSpinner asOverLay />}\n        <h2>Login Required</h2>\n        <hr />\n        <form onSubmit={authSubmitHandler}>\n          {!isLoginMode && (\n            <Input\n              element='input'\n              id='name'\n              type='text'\n              label='Your Name'\n              validators={[VALIDATOR_REQUIRE()]}\n              errorText='Please enter a name.'\n              onInput={inputHandler}\n            />\n          )}\n          {!isLoginMode && (\n            <ImageUpload\n              center\n              id='image'\n              onInput={inputHandler}\n              errorText='Please provide an image'\n            />\n          )}\n          <Input\n            element='input'\n            id='email'\n            type='email'\n            label='E-Mail'\n            validators={[VALIDATOR_EMAIL()]}\n            errorText='Please enter a valid email address.'\n            onInput={inputHandler}\n          />\n          <Input\n            element='input'\n            id='password'\n            type='password'\n            label='Password'\n            validators={[VALIDATOR_MINLENGTH(6)]}\n            errorText='Please enter a valid password, at least 5 characters.'\n            onInput={inputHandler}\n          />\n          <Button type='submit' disabled={!formState.isValid}>\n            {isLoginMode ? 'LOGIN' : 'SIGNUP'}\n          </Button>\n        </form>\n        <Button inverse onClick={switchModeHandler}>\n          SWITCH TO {isLoginMode ? 'SIGNUP' : 'LOGIN'}\n        </Button>\n      </Card>\n    </>\n  );\n};\n\nexport default Auth;\n"],"sourceRoot":""}